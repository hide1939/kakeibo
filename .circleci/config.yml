version: 2.1
executors:
  build-test-executor:
    docker:
      - image: circleci/php:7.3
        environment:
          - APP_ENV: testing
          - APP_KEY: ${APP_KEY}
          - DB_CONNECTION: mysql
          - DB_HOST: 127.0.0.1
          - DB_PORT: 3306
          - DB_DATABASE: test-database
          - DB_USERNAME: test-user
          - DB_PASSWORD: test-password
      - image: circleci/mysql:5.7-ram
        environment:
          - MYSQL_DATABASE: test-database
          - MYSQL_USER: test-user
          - MYSQL_PASSWORD: test-password
  deploy-executor:
    docker:
      - image: google/cloud-sdk
commands:
  cache-composer:
    description: "cache composer to speed up composer install at the second time and after"
    steps:
      - restore_cache:
          # search the cache of composer.lock 
          # if composer.lock was changed, this key will be fail
          keys:
            # checksum "file" -> hash value of "file"
            - composer-cache-{{ checksum "./kakeibo/composer.lock" }}
      - run: 
          name: execute "composer install" to make vendor/
          working_directory: kakeibo
          command: composer install -n --prefer-dist
      - save_cache:
          # chache key(name)
          key: composer-cache-{{ checksum "./kakeibo/composer.lock" }}
          # cache file
          paths:
            - ./kakeibo/vendor
  install-extension:
    description: "install extension to execute phpunit test"
    steps:
      - run:
          name: install extension
          command: |
            sudo apt-get update
            sudo apt-get install -y libfreetype6-dev libjpeg-dev libpng-dev
            sudo docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/
            sudo docker-php-ext-install gd pdo_mysql
  execute-migration:
    description: "migrate database for phpunit test"
    steps:
      - run:
          name: migration
          working_directory: kakeibo
          command: php artisan migrate --env=testing
  execute-phpunit:
    description: "execute phpunit test"
    steps:
      - run:
          name: execute test
          working_directory: kakeibo
          command: vendor/bin/phpunit --log-junit tmp/test/result.xml
  store-test-result:
    description: "store test result"
    steps:
      - store_test_results:
          path: kakeibo/tmp/test
      - store_artifacts:
          path: kakeibo/tmp/test
  store_workspace:
    description: "store workspace for the next job(deploy)"
    steps:
      - persist_to_workspace:
          root: .
          paths: 
            - deploy
            - kakeibo
  use_previous_workspace:
    description: "use stored workspace for this job"
    steps:
      - attach_workspace:
          at: myProject
  setup_docker:
    description: "setup docker"
    steps:
      - setup_remote_docker:
          version: 19.03.13
  install-envsubst:
    description: "install gettext to use envsubst"
    steps:
      - run:
          name: install envsubst
          command: |
            apt-get update
            apt-get install -y gettext
  make-env:
    description: "make env file for production laravel app"
    steps:
      - run:
          name: make env
          working_directory: myProject
          command: cat ./deploy/env/.env.production | envsubst > ./kakeibo/.env
  setup-permission:
    description: "setting permission to Laravel directory"
    steps:
      - run: 
          name: set permission
          working_directory: myProject/kakeibo
          command: |
            chmod -R 777 storage/
            chmod -R 777 bootstrap/cache/
  build-docker-image:
    description: "make docker image that includes kakeibo's source code"
    steps:
      - run:
          name: make docker image
          working_directory: myProject
          command: docker build --file=deploy/Dockerfile -t kakeibo .
  tag-docker-image:
    description: "set tag to docker image"
    steps:
      - run:
          name: tag image
          working_directory: myProject
          command: |
            docker tag kakeibo gcr.io/${GOOGLE_PROJECT_ID}/kakeibo:${CIRCLE_BUILD_NUM}
            docker tag kakeibo gcr.io/${GOOGLE_PROJECT_ID}/kakeibo:latest
  authorize-google-cloud-sdk:
    description: "authorize Google Cloud SDK and setup default settings(https://circleci.com/docs/ja/2.0/google-auth/)(https://cloud.google.com/sdk/docs/authorizing#authorizing_with_a_service_account)"
    steps:  
      - run:
          name: authorize Google Cloud SDK
          command: |
            echo ${GCLOUD_SERVICE_KEY} > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud auth configure-docker
  push-docker-image-to-gcr:
    description: "push Docker images to GCR"
    steps:
      - run:
          name: push image
          working_directory: myProject
          command: |
            docker push gcr.io/${GOOGLE_PROJECT_ID}/kakeibo:${CIRCLE_BUILD_NUM}
            docker push gcr.io/${GOOGLE_PROJECT_ID}/kakeibo:latest
  connect-to-cluster:
    description: "connect to cluster that has kakeibo's node and pods"
    steps:
      - run:
          name: connect cluster
          command: gcloud container clusters get-credentials cluster-${CLUSTER_NAME} --zone ${CLUSTER_ZONE} --project ${GOOGLE_PROJECT_ID}
  update-deployment:
    description: "update deployment.yaml to new docker image"
    steps:
      - run:
          name: update deployment
          working_directory: myProject
          command: cat ./deploy/k8s/deployment.yaml | envsubst > ${HOME}/deployment.yaml
  apply-deployment:
    description: "apply deployment.yaml"
    steps:
      - run:
          name: apply deployment
          command: kubectl apply -f ${HOME}/deployment.yaml
  apply-service:
    description: "apply service.yaml"
    steps:
      - run:
          name: apply service
          working_directory: myProject/deploy/k8s
          command: kubectl apply -f service.yaml
jobs:
  build-and-test:
    executor: build-test-executor
    working_directory: ~/myProject
    steps:
      - checkout
      - cache-composer
      - install-extension
      - execute-migration
      - execute-phpunit
      - store-test-result
      - store_workspace
  deploy:
    executor: deploy-executor
    steps:
      - use_previous_workspace
      - setup_docker
      - install-envsubst
      - make-env
      - setup-permission
      - build-docker-image
      - tag-docker-image
      - authorize-google-cloud-sdk
      - push-docker-image-to-gcr
      - connect-to-cluster
      - update-deployment
      - apply-deployment
      - apply-service
workflows:
  version: 2
  build_test_and_deploy:
    jobs:
      - build-and-test
      - deploy:
          requires:
            - build-and-test
          # filters:
          #   branches: 
          #     only:
          #       - main